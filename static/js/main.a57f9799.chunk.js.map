{"version":3,"sources":["Components/QuoteBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","accentColor","handleNewQuote","currentQuote","quote","author","id","className","style","backgroundColor","icon","faQuoteLeft","Button","href","faTwitter","onClick","colorsArr","randomArrVal","arr","console","log","randomNum","Math","floor","random","length","useFetch","url","useState","data","setData","a","fetch","response","json","useEffect","fetchData","App","setAccentColor","quotes","setCurrentQuote","quoteArr","color","Spinner","animation","variant","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gWA+CeA,G,MAvCE,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,aACvCC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OACf,OACE,yBACEC,GAAG,YACHC,UAAU,YACVC,MAAO,CAAEC,gBAAiB,UAE1B,yBAAKF,UAAU,cACb,kBAAC,IAAD,CAAiBG,KAAMC,IAAaJ,UAAU,eAC9C,0BAAMD,GAAG,OAAOC,UAAU,SACvBH,IAGL,yBAAKG,UAAU,gBACb,0BAAMD,GAAG,UAAT,IAAoBD,IAEtB,yBAAKE,UAAU,WACb,kBAACK,EAAA,EAAD,CACEN,GAAG,cACHC,UAAU,4BACVC,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,IAC7BY,KAAI,gDAA2CT,EAA3C,YAAoDC,EAApD,oBAEJ,kBAAC,IAAD,CAAiBK,KAAMI,OAEzB,kBAACF,EAAA,EAAD,CACEN,GAAG,YACHC,UAAU,uBACVQ,QAAS,kBAAMb,KACfM,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,KAJ/B,iB,QC3BFe,EAAY,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,UAErIC,EAAe,SAACC,GACpBC,QAAQC,IAAIF,GACZ,IAAIG,EAAYC,KAAKC,MAAMD,KAAKE,SAAWN,EAAIO,QAE/C,OADAN,QAAQC,IAAIF,EAAIG,IACTH,EAAIG,IAGPK,EAAW,SAAAC,GAAQ,IAAD,EACEC,mBAAS,MADX,mBACfC,EADe,KACTC,EADS,iDAGtB,8BAAAC,EAAA,sEACyBC,MAAML,GAD/B,cACQM,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAGEJ,EAAQI,GAHV,4CAHsB,sBAUtB,OADAC,qBAAU,YATY,mCASJC,KAAe,CAACT,IAC3BE,GAkCMQ,MA/Bf,WAAgB,IAAD,EACyBT,mBAAS,WADlC,mBACN3B,EADM,KACOqC,EADP,KAEPC,EAASb,EA1BA,0IAwBF,EAG2BE,mBAAS,CAAEvB,OAAQ,GAAID,MAAO,KAHzD,mBAGND,EAHM,KAGQqC,EAHR,KAKbL,qBAAU,WACJI,GACFrC,MAED,CAACqC,IAEJ,IAAMrC,EAAiB,WACrBoC,EAAe,IAAD,OAAKrB,EAAaD,KAChC,IAAIyB,EAAWF,EAAOA,OACtBC,EAAgBvB,EAAawB,KAG/B,OACE,yBAAKlC,UAAU,MAAMC,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,GAAeyC,MAAM,GAAD,OAAKzC,KAE/C,KAAvBE,EAAaC,MACZ,kBAACuC,EAAA,EAAD,CAASpC,UAAU,kBAAkBqC,UAAU,OAAOC,QAAQ,QAAQC,KAAK,UACzE,0BAAMvC,UAAU,WAAhB,eAGF,kBAAC,EAAD,CAAUN,YAAaA,EAAaE,aAAcA,EAAcD,eAAgBA,MC1CtE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.a57f9799.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport \"./QuoteBox.style.scss\";\r\n\r\nconst QuoteBox = ({ accentColor, handleNewQuote, currentQuote }) => {\r\n  const { quote, author } = currentQuote;\r\n  return (\r\n    <div\r\n      id=\"quote-box\"\r\n      className=\"quote-box\"\r\n      style={{ backgroundColor: \"white\" }}\r\n    >\r\n      <div className=\"quote-text\">\r\n        <FontAwesomeIcon icon={faQuoteLeft} className=\"quote-mark\" />\r\n        <span id=\"text\" className=\"quote\">\r\n          {quote}\r\n        </span>\r\n      </div>\r\n      <div className=\"quote-author\">\r\n        <span id=\"author\">-{author}</span>\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <Button\r\n          id=\"tweet-quote\"\r\n          className=\"icon quote-btn transition\"\r\n          style={{ backgroundColor: `${accentColor}` }}\r\n          href={`https://twitter.com/intent/tweet?text=${quote}-${author}&hashtags=quote`}\r\n        >\r\n          <FontAwesomeIcon icon={faTwitter} />\r\n        </Button>\r\n        <Button\r\n          id=\"new-quote\"\r\n          className=\"quote-btn transition\"\r\n          onClick={() => handleNewQuote()}\r\n          style={{ backgroundColor: `${accentColor}` }}\r\n        >\r\n          New Quote\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteBox;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport QuoteBox from \"./Components/QuoteBox.component\"\nimport Spinner from 'react-bootstrap/Spinner'\n\nconst quoteURL = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n\nconst colorsArr = ['4FC1FF', \"E8B9AB\", 'CB769E', '69995D', 'D2D7DF', '3AA7A3', 'ECA400', '006992', 'AFECE7', '81F499', '890620', 'B6465F', '8ACDEA']\n\nconst randomArrVal = (arr) => {\n  console.log(arr)\n  let randomNum = Math.floor(Math.random() * arr.length)\n  console.log(arr[randomNum])\n  return arr[randomNum]\n}\n\nconst useFetch = url => {\n  const [data, setData] = useState(null);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n  }\n\n  useEffect(() => { fetchData() }, [url]);\n  return data;\n};\n\nfunction App() {\n  const [accentColor, setAccentColor] = useState('#4FC1FF')\n  const quotes = useFetch(quoteURL)\n  const [currentQuote, setCurrentQuote] = useState({ author: '', quote: '' })\n  \n  useEffect(() => {\n    if (quotes) {\n      handleNewQuote()\n    }\n  }, [quotes])\n\n  const handleNewQuote = () => {\n    setAccentColor(`#${randomArrVal(colorsArr)}`)\n    let quoteArr = quotes.quotes\n    setCurrentQuote(randomArrVal(quoteArr))\n  }\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: `${accentColor}`, color: `${accentColor}` }}>\n      {\n        (currentQuote.quote === \"\") ?\n          <Spinner className=\"loading-spinner\" animation=\"grow\" variant=\"light\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          :\n          <QuoteBox accentColor={accentColor} currentQuote={currentQuote} handleNewQuote={handleNewQuote} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}